# =============================================================================
# PRODUCTION DOCKER COMPOSE
# =============================================================================
# Usage: docker compose up -d
# Features:
# - Caddy reverse proxy with automatic HTTPS
# - Internal networking (no direct port exposure except Caddy)
# - Production-ready configuration
# =============================================================================

services:
  redis:
    image: redis:7-alpine
    container_name: audio_redis
    expose:
      - "6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped

  postgres:
    image: postgres:15-alpine
    container_name: audio_postgres
    expose:
      - "5432"
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-audio_db}
      POSTGRES_USER: ${POSTGRES_USER:-user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-user} -d ${POSTGRES_DB:-audio_db}"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped

  minio:
    image: minio/minio:latest
    container_name: audio_minio
    expose:
      - "9000"
      - "9001"
    ports:
      - "127.0.0.1:9000:9000"  # S3 API (localhost only)
      - "127.0.0.1:9001:9001"  # Web Console (localhost only)
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin}
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    restart: unless-stopped

  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: audio_app
    expose:
      - "8000"
    environment:
      - REDIS_URL=${REDIS_URL:-redis://redis:6379/0}
      - DATABASE_URL=${DATABASE_URL:-postgresql+psycopg://user:password@postgres:5432/audio_db}
      - HF_TOKEN=${HF_TOKEN}
      - MAX_WORKERS=${MAX_WORKERS:-3}
      - WORKER_CONCURRENCY=${WORKER_CONCURRENCY:-1}
      - TASK_TIMEOUT=${TASK_TIMEOUT:-3600}
      - MINIO_ENDPOINT=${MINIO_ENDPOINT:-minio:9000}
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY:-minioadmin}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY:-minioadmin}
      - MINIO_BUCKET_NAME=${MINIO_BUCKET_NAME:-audio-files}
      - MINIO_SECURE=${MINIO_SECURE:-false}
      - USE_MINIO=${USE_MINIO:-true}
      - NVIDIA_VISIBLE_DEVICES=${NVIDIA_VISIBLE_DEVICES:-all}
      - LOG_DIR=${LOG_DIR:-/app/logs}
      - UPLOAD_DIR=${UPLOAD_DIR:-/app/uploads}
      - API_KEY=${API_KEY:-mvp-api-key-123}
      - WHISPER_MODEL=${WHISPER_MODEL:-medium}
      - MAX_FILE_SIZE=${MAX_FILE_SIZE:-524288000}
      - MAX_DURATION_SECONDS=${MAX_DURATION_SECONDS:-28800}
      - MAX_VRAM_GB=${MAX_VRAM_GB:-16}
      - MAX_RAM_GB=${MAX_RAM_GB:-32}
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    runtime: nvidia
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # Model initialization service - runs once to download models
  model_init:
    build:
      context: .
      dockerfile: Dockerfile
    command: python scripts/init_models.py
    environment:
      - HF_TOKEN=${HF_TOKEN}
      - WHISPER_MODEL=${WHISPER_MODEL:-medium}
      - MODEL_CACHE_DIR=/models
    volumes:
      - models_cache:/models
    runtime: nvidia
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    restart: "no"  # Only runs once

  rq_worker:
    build:
      context: .
      dockerfile: Dockerfile
    command: python -m src.rq_worker
    environment:
      - REDIS_URL=${REDIS_URL:-redis://redis:6379/0}
      - DATABASE_URL=${DATABASE_URL:-postgresql+psycopg://user:password@postgres:5432/audio_db}
      - HF_TOKEN=${HF_TOKEN}
      - MAX_WORKERS=${MAX_WORKERS:-3}
      - TASK_TIMEOUT=${TASK_TIMEOUT:-3600}
      - MINIO_ENDPOINT=${MINIO_ENDPOINT:-minio:9000}
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY:-minioadmin}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY:-minioadmin}
      - MINIO_BUCKET_NAME=${MINIO_BUCKET_NAME:-audio-files}
      - MINIO_SECURE=${MINIO_SECURE:-false}
      - USE_MINIO=${USE_MINIO:-true}
      - NVIDIA_VISIBLE_DEVICES=${NVIDIA_VISIBLE_DEVICES:-all}
      - LOG_DIR=${LOG_DIR:-/app/logs}
      - UPLOAD_DIR=${UPLOAD_DIR:-/app/uploads}
      - MODEL_CACHE_DIR=/models  # Shared readonly models directory
      - WHISPER_MODEL=${WHISPER_MODEL:-medium}
      - MAX_FILE_SIZE=${MAX_FILE_SIZE:-524288000}
      - MAX_DURATION_SECONDS=${MAX_DURATION_SECONDS:-28800}
      - MAX_VRAM_GB=${MAX_VRAM_GB:-16}
      - MAX_RAM_GB=${MAX_RAM_GB:-32}
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
      - models_cache:/models:ro  # Read-only mount for fast model access
    runtime: nvidia
    deploy:
      replicas: ${MAX_WORKERS:-3}
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
      app:
        condition: service_healthy
      model_init:
        condition: service_completed_successfully
    restart: unless-stopped
    
  rq_dashboard:
    image: eoranged/rq-dashboard:latest
    container_name: audio_rq_dashboard
    expose:
      - "9181"
    environment:
      - RQ_DASHBOARD_REDIS_URL=${RQ_DASHBOARD_REDIS_URL:-redis://redis:6379/0}
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped

  caddy:
    image: caddy:2-alpine
    container_name: audio_caddy
    ports:
      - "80:80"
      - "443:443"
      - "443:443/udp"  # HTTP/3
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile
      - caddy_data:/data
      - caddy_config:/config
    depends_on:
      app:
        condition: service_healthy
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:latest
    container_name: audio_prometheus
    expose:
      - "9090"
    # Only expose on localhost for security
    ports:
      - "127.0.0.1:9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    depends_on:
      - app
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: audio_grafana
    expose:
      - "3000"
    # Only expose on localhost for security
    ports:
      - "127.0.0.1:3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD:-admin123}
      - GF_INSTALL_PLUGINS=${GF_INSTALL_PLUGINS:-grafana-clock-panel,grafana-simple-json-datasource}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      prometheus:
        condition: service_started
    restart: unless-stopped

  # NVIDIA GPU metrics exporter (simplified)
  nvidia-gpu-exporter:
    image: mindprince/nvidia_gpu_prometheus_exporter:0.1
    container_name: audio_gpu_exporter
    expose:
      - "9835"
    environment:
      - NVIDIA_VISIBLE_DEVICES=${NVIDIA_VISIBLE_DEVICES:-all}
    runtime: nvidia
    restart: unless-stopped
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]

  # Container metrics (cAdvisor) - monitors all containers CPU/RAM/Network/Disk
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: audio_cadvisor
    expose:
      - "8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    privileged: true
    restart: unless-stopped

  # S3 Cleanup - runs daily to remove old files
  s3_cleanup:
    build:
      context: .
      dockerfile: Dockerfile
    command: sh -c "while true; do python scripts/cleanup_s3_files.py && sleep 86400; done"
    environment:
      - MINIO_ENDPOINT=${MINIO_ENDPOINT:-minio:9000}
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY:-minioadmin}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY:-minioadmin}
      - MINIO_BUCKET_NAME=${MINIO_BUCKET_NAME:-audio-files}
      - MINIO_SECURE=${MINIO_SECURE:-false}
      - USE_MINIO=${USE_MINIO:-true}
      - S3_RETENTION_DAYS=${S3_RETENTION_DAYS:-7}
    depends_on:
      minio:
        condition: service_healthy
    restart: unless-stopped
    profiles:
      - cleanup  # Optional service - activate with: docker compose --profile cleanup up

volumes:
  redis_data:
  postgres_data:
  minio_data:
  caddy_data:
  caddy_config:
  prometheus_data:
  grafana_data:
  models_cache:  # Shared volume for Whisper models - accessed by all workers